class Parser

   prechigh   nonassoc UMINUS   nonassoc TokNot    left TokMult TokDiv TokMod   left BIMINUS TokMinus TokPlus   left TokOr TokAnd         nonassoc TokLess TokMoreEq TokLessEq TokMore TokEqual TokNotEqual   preclow

   token BIMINUS UMINUS TokLess TokFi TokPlus TokOr TokAs TokEqual TokValue TokProc TokMore TokOd TokNot TokAssign TokNotEqual TokOf TokDo TokArray TokNumber TokReturn TokSelect TokIn TokDiv TokLength TokTrue TokShow TokTwoDots TokComma TokAnd TokString TokMinus TokSkip TokEnd TokOpBracet TokMain TokOut TokOpenParen TokCloseBracket TokLessEq TokCloseParen TokIf TokFalse TokMod TokBegin TokString TokId TokDotComma TokMult TokMoreEq TokVar TokPipe   start START
ruleSTART          : MAIN                                                                                 {puts "START -> MAIN"; puts ""; puts @tabla_de_simbolos}               | VAR MAIN                                                                             {puts "START -> VAR MAIN"; puts ""; puts @tabla_de_simbolos}               | PROC MAIN                                                                            {puts "START -> PROC MAIN"; puts ""; puts @tabla_de_simbolos}               | VAR PROC MAIN                                                                        {puts "START -> VAR PROC MAIN"; puts ""; puts @tabla_de_simbolos}VAR            : TokVar LIST_ID TokTwoDots TIPO                                                       {puts "VAR -> var LIST_ID : TIPO"; @tabla_de_simbolos.insertVars(val[1],val[3])}               | VAR TokVar LIST_ID TokTwoDots TIPO                                                   {puts "VAR -> VAR var LIST_ID : TIPO"; @tabla_de_simbolos.insertVars(val[2],val[4])}LIST_ID        : TokId                                                                                {puts "LIST_ID -> TokId(#{val[0]})"; return [@ultimo_token_leido]}               | LIST_ID TokComma TokId                                                               {puts "LIST_ID -> LIST_ID , TokId(#{val[2]})"; x=val[0]; x.push(@ultimo_token_leido); return x}TIPO           : TokValue                                                                             {puts "TIPO -> value"; return -1}               | TokArray TokOf TokNumber                                                             {puts "TIPO -> array of TokNum(#{val[2]})"; return val[2]}PROC           : PROCEDIMIENTO                                                                        {puts "PROC -> PROCEDIMIENTO"; return ""}               | PROC PROCEDIMIENTO                                                                   {puts "PROC -> PROC PROCEDIMIENTO"; return ""}PROCEDIMIENTO  : TokProc TokId TokOpenParen PARAMETRO TokCloseParen TokAs P_INSTRUCCION               {puts "PROCEDIMENTO -> proc TokId(#{val[1]}) ( PARAMETRO ) as P_INSTRUCCION"; @tabla_de_simbolos.insertProc(val[1],val[3],nil,val[6])}               | TokProc TokId TokOpenParen PARAMETRO TokCloseParen TokAs VAR P_INSTRUCCION           {puts "PROCEDIMENTO -> PROCEDIMIENTO proc TokId(#{val[1]}) ( PARAMETRO ) as P_INSTRUCCION"; @tabla_de_simbolos.insertProc(val[1],val[3],val[6],val[7])}PARAMETRO      : TokIn TokId                                                                          {puts "PARAMETRO -> in TokId(#{val[1]})"; return [true, @ultimo_token_leido]}               | TokOut TokId                                                                         {puts "PARAMETRO -> out TokId(#{val[1]})"; return [false, @ultimo_token_leido]}               | PARAMETRO TokComma TokIn TokId                                                       {puts "PARAMETRO -> PARAMETRO , in TokId(#{val[1]})"; x=val[0]; x.push([true, val[3]]); return x}               | PARAMETRO TokComma TokOut TokId                                                      {puts "PARAMETRO -> PARAMETRO , out TokId(#{val[1]})"; x=val[0]; x.push([true, val[3]]); return x}P_INSTRUCCION  : TokSkip                                                                              {puts "P_INSTRUCCION -> skip"; return ""}               | TokReturn                                                                            {puts "P_INSTRUCCION -> return"; return ""}               | ASIGNACION                                                                           {puts "P_INSTRUCCION -> ASIGNACION"; return ""}               | ASIGNARRAY                                                                           {puts "P_INSTRUCCION -> ASIGNARRAY"; return ""}               | TokBegin LIST_P_INST TokEnd                                                          {puts "P_INSTRUCCION -> begin LIST_P_INST end"; return ""}               | TokIf P_SELECCION TokFi                                                              {puts "P_INSTRUCCION -> if P_SELECCION fi"; return ""}               | TokDo P_SELECCION TokOd                                                              {puts "P_INSTRUCCION -> do P_SELECCION od"; return ""}               | TokId TokOpenParen LIST_EXPR TokCloseParen                                           {puts "P_INSTRUCCION -> TokId(#{val[0]}) ( LIST_EXPR )"; return ""}               | TokShow EXPRESION                                                                    {puts "P_INSTRUCCION -> show EXPRESION"; return ""}               | TokShow TokString                                                                    {puts "P_INSTRUCCION -> show TokString(#{val[1]})"; return ""}LIST_P_INST    : P_INSTRUCCION                                                                        {puts "LIST_P_INST -> P_INSTRUCCION"; return ""}               | LIST_P_INST TokDotComma P_INSTRUCCION                                                {puts "LIST_P_INST -> LIST_P_INST ; P_INSTRUCCION"; return ""}P_SELECCION    : GUARDIA TokSelect P_INSTRUCCION                                                      {puts "P_SELECCION -> GUARDIA -> P_INSTRUCCION"; return ""}               | P_SELECCION TokPipe GUARDIA TokSelect P_INSTRUCCION                                  {puts "P_SELECCION -> P_SELECCION GUARDIA -> P_INSTRUCCION"; return ""}ASIGNACION     : TokId TokAssign EXPRESION                                                            {puts "ASIGNACION -> TokId(#{val[0]}) <- EXPRESION"; return ""}               | TokId TokComma ASIGNACION TokComma EXPRESION                                         {puts "ASIGNACION -> TokId(#{val[0]}) , ASIGNACION , EXPRESION"; return ""}ASIGNARRAY     : TokId TokOpBracet EXPRESION TokCloseBracket TokAssign EXPRESION                      {puts "ASIGNARRAY -> TokId(#{val[0]}) [ EXPRESION ] <- EXPRESION"; return ""}               | TokId TokOpBracet EXPRESION TokCloseBracket TokComma ASIGNARRAY TokComma EXPRESION   {puts "ASIGNARRAY -> TokId(#{val[0]}) [ EXPRESION ] , ASIGNARRAY , EXPRESION"; return ""}EXPRESION      : TokNumber                                                                            {puts "EXPRESION -> TokNum(#{val[0]})"; return ""}               | TokId                                                                                {puts "EXPRESION -> TokId(#{val[0]})"; return ""}               | TokLength TokId                                                                      {puts "EXPRESION -> $(#{val[1]})"; return ""}               | EXPRESION EXPROPER                                                                   {puts "EXPRESION -> EXPRESION EXPROPER"; return ""}               | TokOpenParen EXPRESION TokCloseParen                                                 {puts "EXPRESION -> ( EXPRESION )"; return ""}               | TokId TokOpBracet EXPRESION TokCloseBracket                                          {puts "EXPRESION -> TokId(#{val[0]}) [EXPRESION]"; return ""}               | TokMinus TokNumber                                                  =UMINUS          {puts "EXPRESION -> - TokNum(#{val[1]})"; return ""}               | TokMinus TokId                                                      =UMINUS          {puts "EXPRESION -> - TokId(#{val[1]})"; return ""}               | TokMinus TokOpenParen EXPRESION TokCloseParen                       =UMINUS          {puts "EXPRESION -> - ( EXPRESION )"; return ""}               EXPROPER       : TokMult EXPRESION                                                                    {puts "EXPROPER -> * EXPRESION"; return ""}               | TokMinus EXPRESION                                                  =BIMINUS         {puts "EXPROPER -> - EXPRESION"; return ""}               | TokPlus EXPRESION                                                                    {puts "EXPROPER -> + EXPRESION"; return ""}               | TokDiv EXPRESION                                                                     {puts "EXPROPER -> / EXPRESION"; return ""}               | TokMod EXPRESION                                                                     {puts "EXPROPER -> % EXPRESION"; return ""}MAIN           : TokMain LIST_INST TokEnd                                                             {puts "MAIN -> main LIST_INST end"; return ""}INSTRUCCION    : TokSkip                                                                              {puts "INSTRUCCION -> skip"; return ""}               | ASIGNACION                                                                           {puts "INSTRUCCION -> ASIGNACION"; return ""}               | ASIGNARRAY                                                                           {puts "INSTRUCCION -> ASIGNARRAY"; return ""}               | TokBegin LIST_INST TokEnd                                                            {puts "INSTRUCCION -> begin LIST_INST end"; return ""}               | TokIf SELECCION TokFi                                                                {puts "INSTRUCCION -> if SELECCION fi"; return ""}               | TokDo SELECCION TokOd                                                                {puts "INSTRUCCION -> do SELECCION od"; return ""}               | TokId TokOpenParen LIST_EXPR TokCloseParen                                           {puts "INSTRUCCION -> TokId(#{val[0]}) ( LIST_EXPR )"; return ""}               | TokShow EXPRESION                                                                    {puts "INSTRUCCION -> show EXPRESION"; return ""}               | TokShow TokString                                                                    {puts "INSTRUCCION -> show TokString(#{val[1]})"; return ""}LIST_INST      : INSTRUCCION                                                                          {puts "LIST_INST -> INSTRUCCION"; return ""}               | LIST_INST TokDotComma INSTRUCCION                                                    {puts "LIST_INST -> LIST_INST ; INSTRUCCION"; return ""}SELECCION      : GUARDIA TokSelect INSTRUCCION                                                        {puts "SELECCION -> GUARDIA -> INSTRUCCION"; return ""}               | SELECCION TokPipe GUARDIA TokSelect INSTRUCCION                                      {puts "SELECCION -> SELECCION GUARDIA -> INSTRUCCION"; return ""}LIST_EXPR      : EXPRESION                                                                            {puts "LIST_EXPR -> EXPRESION"; return ""}               | LIST_EXPR TokDotComma EXPRESION                                                      {puts "LIST_EXPR -> LIST_EXPR ; EXPRESION"; return ""}GUARDIA        : EXPRESION COMPARE                                                                    {puts "GUARDIA -> EXPRESION COMPARE "; return ""}               | TokTrue                                                                              {puts "GUARDIA -> true"; return ""}               | TokFalse                                                                             {puts "GUARDIA -> false"; return ""}               | GUARDIA GUARDIAOPER                                                                  {puts "GUARDIA -> GUARDIA GUARDIAOPER"; return ""}               | TokNot GUARDIA                                                                       {puts "GUARDIA -> ~ GUARDIA"; return ""}GUARDIAOPER    : TokOr GUARDIA                                                                        {puts "GUARDIAOPER -> || GUARDIA "; return ""}               | TokAnd GUARDIA                                                                       {puts "GUARDIAOPER -> && GUARDIA"; return ""}COMPARE        : TokLess EXPRESION                                                                    {puts "COMPARE -> < EXPRESION"; return ""}               | TokMoreEq EXPRESION                                                                  {puts "COMPARE -> >= EXPRESION"; return ""}               | TokLessEq EXPRESION                                                                  {puts "COMPARE -> <= EXPRESION"; return ""}               | TokMore EXPRESION                                                                    {puts "COMPARE -> > EXPRESION"; return ""}               | TokEqual EXPRESION                                                                   {puts "COMPARE -> = EXPRESION"; return ""}               | TokNotEqual EXPRESION                                                                {puts "COMPARE -> != EXPRESION"; return ""}
end
---- header
#require 'AST.rb'
require 'SymTable.rb'
require 'Sym.rb'
---- inner ----
@ultimo_token_leido
@tabla_de_simbolos
def initialize(l)
   @tabla_de_simbolos=SymTable.new
   @lex =l
end

def on_error(error_token_id, error_value, value_stack)
puts "\nError de sintaxis, revisar la sintaxis cerca de los tokens:\n   #{@ultimo_token_leido}"
puts "   #{@lex.yylex}"
puts "   #{@lex.yylex}"
puts "   #{@lex.yylex}"

end

def parser
   do_parse
end    

def next_token
   t= @lex.yylex
   @ultimo_token_leido = t
   if t== nil then return [false,false] end
   if t!=nil then return [t.class.to_s.to_sym, t.value] end
end
---- footer ----   
